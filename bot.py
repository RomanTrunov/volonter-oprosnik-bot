import logging
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters.command import Command
import asyncio
import aiohttp
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '6871242633:AAFtDye810ejtYdZDxEUc5ABxBXhQTho3Fo'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class SurveyStates(StatesGroup):
    experience = State()
    instrument = State()
    additional_skills = State()
    singing = State()
    lyrics = State()
    composing = State()
    mixing = State()
    live_sound = State()
    demo_link = State()

def create_keyboard(buttons):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=button)] for button in buttons],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç",
        is_persistent=True
    )

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç –î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.")
    await ask_experience(message, state)

async def ask_experience(message: types.Message, state: FSMContext):
    buttons = ["–¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª", "–ú–µ–Ω—å—à–µ 5 –ª–µ—Ç", "–ë–æ–ª—å—à–µ 5 –ª–µ—Ç", "–í—Å—é –∂–∏–∑–Ω—å"]
    keyboard = create_keyboard(buttons)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –º—É–∑—ã–∫–æ–π?", reply_markup=keyboard)
    await state.set_state(SurveyStates.experience)

@dp.message(SurveyStates.experience)
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await ask_instrument(message, state)

async def ask_instrument(message: types.Message, state: FSMContext):
    buttons = ["–ö–ª–∞–≤–∏—à–∏", "–≠–ª–µ–∫—Ç—Ä–æ-–≥–∏—Ç–∞—Ä–∞", "–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –≥–∏—Ç–∞—Ä–∞", "–ë–∞—Å –≥–∏—Ç–∞—Ä–∞", "–ë–∞—Ä–∞–±–∞–Ω—ã", "–î—Ä—É–≥–æ–π",
               "–ú–æ–≥—É –ø–µ—Ç—å –≥–æ–ª–æ—Å–æ–º"]
    keyboard = create_keyboard(buttons)
    await message.answer("–ù–∞ —á–µ–º –≤—ã –∏–≥—Ä–∞–µ—Ç–µ?", reply_markup=keyboard)
    await state.set_state(SurveyStates.instrument)

@dp.message(SurveyStates.instrument)
async def process_instrument(message: types.Message, state: FSMContext):
    await state.update_data(instrument=message.text)
    await ask_additional_skills(message, state)

async def ask_additional_skills(message: types.Message, state: FSMContext):
    await message.answer("–ß—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ –µ—â–µ –ø–æ–º–∏–º–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.additional_skills)

@dp.message(SurveyStates.additional_skills)
async def process_additional_skills(message: types.Message, state: FSMContext):
    await state.update_data(additional_skills=message.text)
    await ask_singing(message, state)

async def ask_singing(message: types.Message, state: FSMContext):
    buttons = ["–î–∞, –ø–æ—é –∫–∞–∫ Jad/Taya —Å Hillsong", "–ù–µ—Ç, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ–ª, —Å–ª–æ–Ω –Ω–∞ —É—Ö–æ –Ω–∞—Å—Ç—É–ø–∏–ª"]
    keyboard = create_keyboard(buttons)
    await message.answer("–í—ã –ø–æ–µ—Ç–µ?", reply_markup=keyboard)
    await state.set_state(SurveyStates.singing)

@dp.message(SurveyStates.singing)
async def process_singing(message: types.Message, state: FSMContext):
    await state.update_data(singing=message.text)
    await ask_lyrics(message, state)

async def ask_lyrics(message: types.Message, state: FSMContext):
    buttons = ["–î–∞, –ø–∏—à—É—Ç—Å—è –Ω–∞ —Ä–∞–∑-–¥–≤–∞", "–ù–µ—Ç, –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å", "–ú–µ—á—Ç–∞—é –∑–∞–≤—Ç—Ä–∞ –∂–µ –Ω–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∞–ª—å–±–æ–º—ã"]
    keyboard = create_keyboard(buttons)
    await message.answer("–í—ã –ø–∏—à–µ—Ç–µ —Ç–µ–∫—Å—Ç—ã –ø–µ—Å–µ–Ω?", reply_markup=keyboard)
    await state.set_state(SurveyStates.lyrics)

@dp.message(SurveyStates.lyrics)
async def process_lyrics(message: types.Message, state: FSMContext):
    await state.update_data(lyrics=message.text)
    await ask_composing(message, state)

async def ask_composing(message: types.Message, state: FSMContext):
    buttons = ["–ù–∏–∫–æ–≥–¥–∞ —Ä–∞–Ω–µ–µ, –ù–µ –ø—Ä–æ–±–æ–≤–∞–ª (–º–∞–ª–æ –æ–ø—ã—Ç–∞)", "–ü–∏—à—É –ø–µ—Å–Ω–∏ –∫–∞–∫ –Ω–µ–π—Ä–æ–Ω–∫–∏ –ø–æ 2 –≤ –º–∏–Ω—É—Ç—É"]
    keyboard = create_keyboard(buttons)
    await message.answer("–í—ã —Å–æ—á–∏–Ω—è–µ—Ç–µ –º—É–∑—ã–∫—É?", reply_markup=keyboard)
    await state.set_state(SurveyStates.composing)

@dp.message(SurveyStates.composing)
async def process_composing(message: types.Message, state: FSMContext):
    await state.update_data(composing=message.text)
    await ask_mixing(message, state)

async def ask_mixing(message: types.Message, state: FSMContext):
    buttons = ["–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –∫–æ–≤—ã—Ä—è—Ç—å—Å—è –≤ –ø—É–ª—å—Ç–µ", "–í—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –Ω–∞—É—á–∏—Ç—å—Å—è", "–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç"]
    keyboard = create_keyboard(buttons)
    await message.answer("–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–¥–∏—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏ –Ω–æ–≤—ã—Ö –ø–µ—Å–µ–Ω –≤ –∞—É–¥–∏–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö –Ω–∞ –ø–æ—Å—Ç–ø—Ä–æ–¥–∞–∫—à–Ω–µ?",
                         reply_markup=keyboard)
    await state.set_state(SurveyStates.mixing)

@dp.message(SurveyStates.mixing)
async def process_mixing(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        return
    await state.update_data(mixing=message.text)
    await ask_live_sound(message, state)

async def ask_live_sound(message: types.Message, state: FSMContext):
    buttons = ["–î–∞", "–ù–µ—Ç", "–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç"]
    keyboard = create_keyboard(buttons)
    await message.answer("–õ—é–±–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∂–∏–≤–æ–π –∑–≤—É–∫ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ñ—Ñ–ª–∞–π–Ω —Å–æ–±—Ä–∞–Ω–∏—è—Ö/–æ–Ω–ª–∞–π–Ω-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è—Ö?",
                         reply_markup=keyboard)
    await state.set_state(SurveyStates.live_sound)

@dp.message(SurveyStates.live_sound)
async def process_live_sound(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        return
    await state.update_data(live_sound=message.text)
    await ask_demo_link(message, state)

async def ask_demo_link(message: types.Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π —Å–µ—Ä–≤–∏—Å, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –≤–∞—à–∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–º–æ –ø–µ—Å–Ω–∏/–∞–ª—å–±–æ–º–∞).",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(SurveyStates.demo_link)

@dp.message(SurveyStates.demo_link)
async def process_demo_link(message: types.Message, state: FSMContext):
    await state.update_data(demo_link=message.text)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result = "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ –í–æ—Ç —Å–æ–±—Ä–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    for key, value in data.items():
        result += f"{key}: {value}\n"

    await message.answer(result)
    await state.clear()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –ø–µ—Å–Ω—é –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ https://SUNO.COM (–ø–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ) –∏, –≤ –ø–æ–º–æ—â—å, —Å–ª–µ–¥—É–π –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ https://cpa.rip/services/suno-ai/?ysclid=ly4p8kk8fc852675696#Kak_sozdat_muzyku_s_pomosu_nejroseti, –∏ –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –Ω–æ–≤—ã–º —Ç–≤–æ—Ä–µ–Ω–∏–µ–º üôÇ")

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main loop: {str(e)}")

if __name__ == '__main__':
    asyncio.run(main())
